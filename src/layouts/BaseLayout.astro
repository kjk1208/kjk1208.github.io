---
import 'katex/dist/katex.min.css';
import '../styles/base.css';
import { SITE, AUTH } from '../site.config'; // AUTH 추가
const { title = SITE.title, description = SITE.description } = Astro.props;
---
<!DOCTYPE html>
<html lang={SITE.lang}>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content={description} />
    <link rel="icon" href="/favicon.svg" />
    <title>{title}</title>

    <!-- ✅ Google Identity Services 로더 + 런타임 설정 -->
    <script src="https://accounts.google.com/gsi/client" async defer></script>
    <meta id="auth-config" data-client-id={AUTH.googleClientId} data-owner={AUTH.ownerEmail}>
  </head>
  <body>
    <header class="nav">
      <div class="nav-inner">
        <a class="nav-brand" href="/">{SITE.title}</a>

        <nav class="nav-links" aria-label="Primary">
          <a href="/reviews/">논문 리뷰</a>
          <a href="/dev/">개발</a>
          <a href="/board/">게시판</a>
          <!-- 로그인한 사용자에게만 보이도록 -->
          <a href="/calendar/" class="only-signed-in">달력</a>
          <a href="/pomodoro/">뽀모도로</a>
          <a href="/about/">About</a>
          <a href="/search/" aria-label="Search">검색</a>
        </nav>

        <div class="nav-spacer"></div>

        <!-- 로그인/로그아웃 버튼 -->
        <button class="button only-signed-out" id="btn-login"  type="button">로그인</button>
        <button class="button only-signed-in"  id="btn-logout" type="button">로그아웃</button>

        <!-- 테마 토글 -->
        <button class="button" id="themeToggle" title="Toggle theme">자동</button>
      </div>
    </header>

    <main class="container">
      <slot />
    </main>

    <footer class="site container small">
      © {new Date().getFullYear()} {SITE.author}. • Built with Astro
    </footer>

    <!-- 로그인 상태에 따라 보이기/숨기기 -->
    <style>
      .only-signed-in  { display: none; }
      .only-signed-out { display: inline-flex; }
      html[data-auth="signed-in"] .only-signed-in  { display: inline-flex; }
      html[data-auth="signed-in"] .only-signed-out { display: none; }
    </style>

    <!-- 테마 토글 스크립트(기존) -->
    <script>
      const btn  = document.getElementById('themeToggle');
      const root = document.documentElement;
      const setLabel = (mode) => { btn.innerText = mode === 'light' ? '라이트' : mode === 'dark' ? '다크' : '자동'; };
      const apply = (mode) => { mode==='auto'?root.removeAttribute('data-theme'):root.setAttribute('data-theme', mode); localStorage.setItem('theme', mode); setLabel(mode); };
      apply(localStorage.getItem('theme') || 'auto');
      btn?.addEventListener('click', () => {
        const cur  = localStorage.getItem('theme') || 'auto';
        const next = cur === 'light' ? 'dark' : cur === 'dark' ? 'auto' : 'light';
        apply(next);
      });
    </script>

    <!-- ✅ Auth: 인라인 구현 (외부 모듈 import 제거) -->
    <script>
      // 상태 헬퍼      
      function setAuthState(signedIn, email="") {
        document.documentElement.dataset.auth = signedIn ? "signed-in" : "signed-out";
        if (signedIn) {
          localStorage.setItem("user_email", email);
        } else {
          localStorage.removeItem("user_email");
          localStorage.removeItem("access_token");
          localStorage.removeItem("token_exp");
        }
      }
      // 초기 상태
      (function boot() {
        const ok = Number(localStorage.getItem("token_exp")||0) > Date.now();
        setAuthState(ok, localStorage.getItem("user_email") || "");
      })();

      // GIS 준비 대기
      async function waitGoogle() {
        for (let i=0;i<50;i++) {
          if (window.google?.accounts?.oauth2) return true;
          await new Promise(r=>setTimeout(r,100));
        }
        return false;
      }

      // 런타임 설정 읽기
      const cfgEl = document.getElementById('auth-config');
      const CLIENT_ID = cfgEl?.dataset.clientId || "";
      const OWNER     = cfgEl?.dataset.owner || "";

      async function signIn() {
        const ok = await waitGoogle();
        if (!ok)       { alert("Google SDK 로딩 중입니다. 잠시 후 다시 시도하세요."); return; }
        if (!CLIENT_ID){ alert("Client ID가 설정되지 않았습니다."); return; }

        const tokenClient = google.accounts.oauth2.initTokenClient({
          client_id: CLIENT_ID,
          scope: "openid email profile https://www.googleapis.com/auth/calendar",
          prompt: "consent",
          callback: async (resp) => {
            if (resp.error) { alert("로그인 실패: " + resp.error); return; }
            const accessToken = resp.access_token;
            const expiresIn   = resp.expires_in;

            let email = "";
            try {
              const me = await fetch("https://www.googleapis.com/oauth2/v3/userinfo", {
                headers: { Authorization: `Bearer ${accessToken}` }
              }).then(r=>r.json());
              email = me?.email || "";
            } catch {}

            localStorage.setItem("access_token", accessToken);
            localStorage.setItem("token_exp", String(Date.now() + expiresIn*1000));
            setAuthState(true, email);

            if (email && email !== OWNER) {
              console.info("[Auth] 로그인됨(비소유자):", email);
            }
          }
        });
        tokenClient.requestAccessToken();
      }

      function signOut() { setAuthState(false); }

      document.getElementById('btn-login') ?.addEventListener('click', signIn);
      document.getElementById('btn-logout')?.addEventListener('click', signOut);
    </script>
    <script is:inline>
      document.addEventListener('DOMContentLoaded', () => {
        const owner = document.getElementById('auth-config')?.dataset.owner || '';
        const email = localStorage.getItem('user_email') || '';
        const isOwner = email && owner && email === owner;

        // 주인장에게만 보일 요소
        document.querySelectorAll('.only-owner').forEach(el => {
          el.style.display = isOwner ? '' : 'none';
        });
      });
    </script>
  </body>
</html>
