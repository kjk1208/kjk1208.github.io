---
import BaseLayout from "../../layouts/BaseLayout.astro";
import { AUTH, CALENDAR } from "../../site.config";
---

<style is:global>
  /* FullCalendar CSS는 CDN으로 전역 주입 (패키지 CSS import 금지) */
  @import url("https://cdn.jsdelivr.net/npm/@fullcalendar/common@6.1.19/main.min.css");
  @import url("https://cdn.jsdelivr.net/npm/@fullcalendar/daygrid@6.1.19/main.min.css");
</style>

<BaseLayout title="달력">
  <h1>달력</h1>

  <!-- (비로그인) 공개 캘린더 임베드 -->
  <section class="card only-signed-out" id="public-embed">
    <p class="small">로그인하면 내 캘린더를 읽고/쓸 수 있습니다.</p>
    <div style="overflow:hidden">
      <iframe
        src={`https://calendar.google.com/calendar/embed?src=${encodeURIComponent(CALENDAR.id)}&ctz=${encodeURIComponent(CALENDAR.timezone)}&mode=MONTH`}
        style="width:100%; height:70vh; border:0" loading="lazy">
      </iframe>
    </div>
  </section>

  <!-- (로그인) 달력 뷰 + 쓰기 버튼 -->
  <section class="card only-signed-in">
    <div>
      <strong>내 캘린더 (primary)</strong>
      <div class="small">주인장 계정으로 로그인해야만 캘린더가 보입니다.</div>
    </div>    
    <hr class="sep" />
    <div id="calendar" style="min-height: 650px;"></div>
  </section>

  <!-- ✅ FullCalendar JS (CDN, 글로벌 객체) -->
  <script is:inline src="https://cdn.jsdelivr.net/npm/@fullcalendar/core@6.1.19/index.global.min.js"></script>
  <script is:inline src="https://cdn.jsdelivr.net/npm/@fullcalendar/daygrid@6.1.19/index.global.min.js"></script>
  <script is:inline src="https://cdn.jsdelivr.net/npm/@fullcalendar/interaction@6.1.19/index.global.min.js"></script>

  <!-- ✅ 캘린더 초기화 + Google Calendar에서 이벤트 불러오기 -->
  <script is:inline>
  (() => {
    function getAccessToken() {
      const t = localStorage.getItem("access_token");
      const exp = Number(localStorage.getItem("token_exp") || 0);
      return (t && exp > Date.now()) ? t : null;
    }
    const toISO = (dt) => (dt instanceof Date) ? dt.toISOString() : new Date(dt).toISOString();

    document.addEventListener("DOMContentLoaded", () => {
      const token = getAccessToken();
      if (token) document.getElementById("public-embed")?.remove();

      const el = document.getElementById("calendar");
      if (!el || !token) return;

      const FC = window.FullCalendar;
      if (!FC) { console.error("[cal] FullCalendar global not loaded"); return; }

      // OWNER 확인
      const ownerMeta = document.getElementById("auth-config");
      const OWNER = ownerMeta?.dataset.owner || "";
      const userEmail = localStorage.getItem("user_email") || "";
      const isOwner = (userEmail && OWNER && userEmail === OWNER);      

      // 캘린더 옵션 (plugins는 CDN 자동등록 사용)
      const options = {
        initialView: "dayGridMonth",
        locale: "ko",
        firstDay: 0,
        height: "auto",
        headerToolbar: { left: "prev,next today", center: "title", right: "" },

        // 상호작용
        selectable: isOwner,     // 드래그 범위 선택 → select 콜백
        selectMirror: true,
        editable: isOwner,       // 이벤트 드래그/리사이즈
        dayMaxEventRows: true,

        // 구글 캘린더에서 현재 뷰 범위만 로드
        events: async (info, success, failure) => {
          try {
            const url = new URL("https://www.googleapis.com/calendar/v3/calendars/primary/events");
            url.searchParams.set("singleEvents", "true");
            url.searchParams.set("orderBy", "startTime");
            url.searchParams.set("timeMin", new Date(info.start).toISOString());
            url.searchParams.set("timeMax", new Date(info.end).toISOString());
            const res = await fetch(url, { headers: { Authorization: `Bearer ${token}` } });
            if (!res.ok) { failure(new Error(await res.text().catch(()=> ""))); return; }
            const { items = [] } = await res.json();
            success(items.map(e => ({
              id: e.id,
              title: e.summary || "(제목 없음)",
              start: e.start?.dateTime || e.start?.date,
              end:   e.end?.dateTime   || e.end?.date,
              allDay: !!e.start?.date
            })));
          } catch (err) { failure(err); }
        },
        
        // 드래그 "범위" 선택으로 생성
        select: async (selInfo) => {
          if (!isOwner) return;
          const title = window.prompt("이벤트 제목을 입력하세요:");
          if (!title) { selInfo.view.calendar.unselect(); return; }
          const allDay = selInfo.allDay;
          const startISO = allDay ? selInfo.startStr : toISO(selInfo.start);
          const endISO   = allDay ? selInfo.endStr   : toISO(selInfo.end);
          try {
            const res = await fetch("https://www.googleapis.com/calendar/v3/calendars/primary/events", {
              method: "POST",
              headers: { Authorization: `Bearer ${token}`, "Content-Type": "application/json" },
              body: JSON.stringify({
                summary: title,
                start: allDay ? { date: startISO.slice(0,10) } : { dateTime: startISO, timeZone: "Asia/Seoul" },
                end:   allDay ? { date: endISO.slice(0,10) }   : { dateTime: endISO,   timeZone: "Asia/Seoul" }
              })
            });
            if (!res.ok) throw new Error(await res.text().catch(()=> "create failed"));
            selInfo.view.calendar.refetchEvents();
          } catch (e) { console.error(e); alert("이벤트 생성 실패"); }
          finally { selInfo.view.calendar.unselect(); }
        },

        // 클릭 → 삭제
        eventClick: async (info) => {
          if (!isOwner) return;
          if (!window.confirm(`삭제할까요?\n\n${info.event.title}`)) return;
          try {
            await fetch(`https://www.googleapis.com/calendar/v3/calendars/primary/events/${encodeURIComponent(info.event.id)}`, {
              method: "DELETE", headers: { Authorization: `Bearer ${token}` }
            });
            info.event.remove();
          } catch (e) { console.error(e); alert("삭제 실패"); }
        },

        // 드래그 이동
        eventDrop: async (info) => {
          if (!isOwner) { info.revert(); return; }
          const ev = info.event;
          const allDay = ev.allDay;
          const startISO = allDay ? ev.startStr : toISO(ev.start);
          const endISO   = allDay ? ev.endStr   : toISO(ev.end || ev.start);
          try {
            const res = await fetch(`https://www.googleapis.com/calendar/v3/calendars/primary/events/${encodeURIComponent(ev.id)}`, {
              method: "PATCH",
              headers: { Authorization: `Bearer ${token}`, "Content-Type": "application/json" },
              body: JSON.stringify({
                start: allDay ? { date: startISO.slice(0,10) } : { dateTime: startISO, timeZone: "Asia/Seoul" },
                end:   allDay ? { date: endISO.slice(0,10) }   : { dateTime: endISO,   timeZone: "Asia/Seoul" }
              })
            });
            if (!res.ok) throw new Error(await res.text().catch(()=> "update failed"));
          } catch (e) { console.error(e); alert("이동 실패"); info.revert(); }
        },

        // 리사이즈
        eventResize: async (info) => {
          if (!isOwner) { info.revert(); return; }
          const ev = info.event;
          const allDay = ev.allDay;
          const startISO = allDay ? ev.startStr : toISO(ev.start);
          const endISO   = allDay ? ev.endStr   : toISO(ev.end || ev.start);
          try {
            const res = await fetch(`https://www.googleapis.com/calendar/v3/calendars/primary/events/${encodeURIComponent(ev.id)}`, {
              method: "PATCH",
              headers: { Authorization: `Bearer ${token}`, "Content-Type": "application/json" },
              body: JSON.stringify({
                start: allDay ? { date: startISO.slice(0,10) } : { dateTime: startISO, timeZone: "Asia/Seoul" },
                end:   allDay ? { date: endISO.slice(0,10) }   : { dateTime: endISO,   timeZone: "Asia/Seoul" }
              })
            });
            if (!res.ok) throw new Error(await res.text().catch(()=> "update failed"));
          } catch (e) { console.error(e); alert("시간 변경 실패"); info.revert(); }
        }
      };

      const calendar = new FC.Calendar(el, options);
      calendar.render();
    });
  })();
  </script>


  <style is:global>
    #calendar { position: relative; z-index: 1; }
    #calendar :global(.fc) {
      --fc-border-color: var(--border);
      --fc-button-bg-color: var(--surface);
      --fc-button-text-color: var(--fg);
      --fc-button-border-color: var(--border);
      --fc-page-bg-color: var(--surface);
      --fc-neutral-bg-color: var(--surface);
      --fc-list-event-hover-bg-color: var(--surface);
    }
  </style>
</BaseLayout>
