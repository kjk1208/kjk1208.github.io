---
const DEFAULTS = { focus: 25, short: 5, long: 15, interval: 4 };
---
<section class="card" aria-label="Pomodoro Timer">
  <div style="display:flex; gap:1rem; align-items:center; justify-content:space-between; flex-wrap:wrap;">
    <div>
      <h2 style="margin:.2rem 0">Pomodoro</h2>
      <div class="small">Focus / Short / Long / Long-interval</div>
      <div style="display:flex; gap:.4rem; margin-top:.5rem;">
        <input id="mFocus" type="number" min="1" value={DEFAULTS.focus} style="width:4.5rem" aria-label="Focus minutes" />
        <input id="mShort" type="number" min="1" value={DEFAULTS.short} style="width:4.5rem" aria-label="Short break minutes" />
        <input id="mLong" type="number" min="1" value={DEFAULTS.long} style="width:4.5rem" aria-label="Long break minutes" />
        <input id="mInterval" type="number" min="1" value={DEFAULTS.interval} style="width:5.5rem" aria-label="Long break interval" />
      </div>
    </div>
    <div>
      <div id="phase" class="badge" style="text-align:right">대기</div>
      <div id="time" style="font-size:3rem; font-weight:700; letter-spacing:1px;">25:00</div>
      <div style="display:flex; gap:.5rem; margin-top:.4rem;">
        <button id="start" class="button">시작</button>
        <button id="pause" class="button">일시정지</button>
        <button id="reset" class="button">리셋</button>
        <button id="skip" class="button">스킵</button>
      </div>
    </div>
  </div>
</section>

<script client:load>
  const el = (id) => document.getElementById(id);
  const timeEl = el('time');
  const phaseEl = el('phase');
  const btnStart = el('start');
  const btnPause = el('pause');
  const btnReset = el('reset');
  const btnSkip = el('skip');
  const mFocus = el('mFocus'); const mShort = el('mShort'); const mLong = el('mLong'); const mInterval = el('mInterval');

  const load = () => {
    try {
      const s = JSON.parse(localStorage.getItem('pomodoro-prefs') || '{}');
      if (s.focus) mFocus.value = s.focus;
      if (s.short) mShort.value = s.short;
      if (s.long) mLong.value = s.long;
      if (s.interval) mInterval.value = s.interval;
    } catch {}
  };
  const save = () => {
    localStorage.setItem('pomodoro-prefs', JSON.stringify({
      focus: Number(mFocus.value), short: Number(mShort.value), long: Number(mLong.value), interval: Number(mInterval.value)
    }));
  };
  [mFocus, mShort, mLong, mInterval].forEach(i => i.addEventListener('change', save));
  load();

  let timer = null;
  let remaining = 0;
  let cycle = 0; // focus count
  let state = 'idle'; // 'focus' | 'short' | 'long'
  const fmt = (sec) => {
    const m = Math.floor(sec / 60).toString().padStart(2, '0');
    const s = Math.floor(sec % 60).toString().padStart(2, '0');
    return `${m}:${s}`;
  };
  const setTitle = (t) => { document.title = `${t} • Pomodoro`; };
  const beep = () => {
    try {
      const ctx = new (window.AudioContext || window.webkitAudioContext)();
      const o = ctx.createOscillator();
      const g = ctx.createGain();
      o.type = 'sine'; o.frequency.value = 880;
      o.connect(g); g.connect(ctx.destination);
      g.gain.setValueAtTime(0.0001, ctx.currentTime);
      g.gain.exponentialRampToValueAtTime(0.2, ctx.currentTime + 0.01);
      g.gain.exponentialRampToValueAtTime(0.0001, ctx.currentTime + 0.4);
      o.start(); o.stop(ctx.currentTime + 0.4);
    } catch {}
  };
  const tick = () => {
    remaining -= 1;
    if (remaining <= 0) {
      clearInterval(timer); timer = null;
      beep();
      nextPhase();
      return;
    }
    timeEl.textContent = fmt(remaining);
    setTitle(timeEl.textContent);
  };
  const startPhase = (which) => {
    state = which;
    const d = { focus: Number(mFocus.value), short: Number(mShort.value), long: Number(mLong.value) };
    remaining = 60 * (which === 'focus' ? d.focus : which === 'short' ? d.short : d.long);
    timeEl.textContent = fmt(remaining);
    phaseEl.textContent = which === 'focus' ? '집중' : which === 'short' ? '짧은 휴식' : '긴 휴식';
    if (timer) clearInterval(timer);
    timer = setInterval(tick, 1000);
    setTitle(fmt(remaining));
  };
  const nextPhase = () => {
    if (state === 'focus') {
      cycle += 1;
      const needLong = (cycle % Number(mInterval.value)) === 0;
      startPhase(needLong ? 'long' : 'short');
    } else {
      startPhase('focus');
    }
  };
  btnStart.addEventListener('click', () => {
    if (!timer) {
      if (state === 'idle') startPhase('focus'); else timer = setInterval(tick, 1000);
    }
  });
  btnPause.addEventListener('click', () => { if (timer) { clearInterval(timer); timer = null; setTitle('일시정지'); } });
  btnReset.addEventListener('click', () => {
    if (timer) { clearInterval(timer); timer = null; }
    state = 'idle'; cycle = 0; remaining = 0;
    timeEl.textContent = `${String(mFocus.value).padStart(2,'0')}:00`;
    phaseEl.textContent = '대기';
    setTitle('Pomodoro');
  });
  btnSkip.addEventListener('click', () => { if (state !== 'idle') nextPhase(); });
  // initialize display
  timeEl.textContent = `${String(mFocus.value).padStart(2,'0')}:00`;
</script>
